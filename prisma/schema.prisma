// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Country {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]
}

model City {
  id        Int     @id @default(autoincrement())
  name      String
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int
  users     User[]
  bands     Band[]
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  description    String?
  gender         String
  birthYear      Int
  city           City     @relation(fields: [cityId], references: [id])
  cityId         Int
  profilePicture String?
  likesGenres    Genre[]
  plays          Player[]
}

model Instrument {
  id               Int      @id @default(autoincrement())
  name             String
  lookedForByBands Band[]
  playedBy         Player[]
}

model SkillLevel {
  level       Int      @id
  description String
  Player      Player[]
}

model Player {
  id                  Int                   @id @default(autoincrement())
  user                User                  @relation(fields: [userId], references: [id])
  userId              Int
  instrument          Instrument            @relation(fields: [instrumentId], references: [id])
  instrumentId        Int
  howLong             Float
  skillLevel          SkillLevel            @relation(fields: [skillLevelLevel], references: [level])
  skillLevelLevel     Int
  Member              Member[]
  bandJoiningRequests BandJoiningRequest[]
  bandJoiningResponse BandJoiningResponse[]
}

model Genre {
  id            Int    @id @default(autoincrement())
  name          String
  playedByBands Band[]
  likedByUsers  User[]
}

model Member {
  id                       Int                       @id @default(autoincrement())
  band                     Band                      @relation(fields: [bandId], references: [id])
  bandId                   Int
  player                   Player                    @relation(fields: [playerId], references: [id])
  playerId                 Int
  practiceSessionResponses PracticeSessionResponse[]
}

model Band {
  id                       Int                       @id @default(autoincrement())
  name                     String
  city                     City                      @relation(fields: [cityId], references: [id])
  cityId                   Int
  profilePicture           String?
  genresPlayed             Genre[]
  lookingForInstruments    Instrument[]
  members                  Member[]
  bandJoiningRequests      BandJoiningRequest[]
  practiceSessionProposals PracticeSessionProposal[]
}

model BandJoiningRequest {
  id        Int                   @id @default(autoincrement())
  band      Band                  @relation(fields: [bandId], references: [id])
  bandId    Int
  player    Player                @relation(fields: [playerId], references: [id])
  playerId  Int
  responses BandJoiningResponse[]
}

model BandJoiningResponse {
  id        Int                @id @default(autoincrement())
  request   BandJoiningRequest @relation(fields: [requestId], references: [id])
  requestId Int
  player    Player             @relation(fields: [playerId], references: [id])
  playerId  Int
  accepted  Boolean
}

model PracticeSessionProposal {
  id          Int                       @id @default(autoincrement())
  band        Band                      @relation(fields: [bandId], references: [id])
  bandId      Int
  dateAndTime DateTime
  Place       String
  responses   PracticeSessionResponse[]
}

model PracticeSessionResponse {
  id         Int                     @id @default(autoincrement())
  proposal   PracticeSessionProposal @relation(fields: [proposalId], references: [id])
  proposalId Int
  member     Member                  @relation(fields: [memberId], references: [id])
  memberId   Int
  accepted   Boolean
}
